#!/usr/bin/env python3
"""
üêç –ü–†–ï–ú–ò–£–ú –ó–ú–ï–ô–ö–ê v3.0 üêç
–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–æ–π –ø–æ–¥ –º–æ–±–∏–ª—å–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.

–ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
- –í—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–ª—è (Small, Medium, Large, Classic)
- –¢–∞–π–º–µ—Ä —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
- –í–≤–æ–¥ –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞ –ø—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∏–≥—Ä—ã
- –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å—á—ë—Ç–∞
- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø–æ–¥ Android
"""

import curses
import random
import time
import json
import os
import string
from enum import Enum
from dataclasses import dataclass, asdict
from typing import List, Tuple, Optional, Dict, Any
from pathlib import Path


class Direction(Enum):
    UP = (-1, 0)
    DOWN = (1, 0)
    LEFT = (0, -1)
    RIGHT = (0, 1)


class GameState(Enum):
    MENU = "menu"
    PLAYING = "playing"
    PAUSED = "paused"
    GAME_OVER = "game_over"
    SETTINGS = "settings"
    HIGH_SCORES = "high_scores"
    NAME_INPUT = "name_input"


@dataclass
class Point:
    y: int
    x: int
    
    def __add__(self, direction: Direction):
        dy, dx = direction.value
        return Point(self.y + dy, self.x + dx)
    
    def __eq__(self, other):
        return self.y == other.y and self.x == other.x


@dataclass
class FieldSize:
    name: str
    width: int
    height: int
    description: str


# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –ø–æ–ª–µ–π –∏–∑ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö –∑–º–µ–µ–∫
FIELD_SIZES = {
    "Small": FieldSize("Small", 20, 15, "–ú–∞–ª–µ–Ω—å–∫–æ–µ –ø–æ–ª–µ - –±—ã—Å—Ç—Ä—ã–µ –∏–≥—Ä—ã"),
    "Medium": FieldSize("Medium", 30, 20, "–°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä - –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ"),
    "Large": FieldSize("Large", 40, 25, "–ë–æ–ª—å—à–æ–µ –ø–æ–ª–µ - –¥–æ–ª–≥–∏–µ –∏–≥—Ä—ã"),
    "Classic": FieldSize("Classic", 25, 18, "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä Nokia")
}


@dataclass
class GameSettings:
    initial_speed: int = 120
    difficulty: str = "Medium"
    show_grid: bool = True
    smooth_animation: bool = True
    sound_effects: bool = False
    theme: str = "Classic"
    field_size: str = "Medium"
    timer_mode: bool = True
    auto_speed_increase: bool = True
    
    def to_dict(self) -> Dict[str, Any]:
        return asdict(self)
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]):
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø–æ–ª—è
        known_fields = {field.name for field in cls.__dataclass_fields__.values()}
        filtered_data = {k: v for k, v in data.items() if k in known_fields}
        return cls(**filtered_data)


@dataclass 
class GameSession:
    """–î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    start_time: float
    end_time: float = 0
    score: int = 0
    foods_eaten: int = 0
    max_length: int = 3
    field_size: str = "Medium"
    difficulty: str = "Medium"
    
    def duration(self) -> float:
        return (self.end_time or time.time()) - self.start_time
    
    def to_dict(self) -> Dict[str, Any]:
        return asdict(self)


class HighScoreManager:
    def __init__(self, filename="snake_premium_scores.json"):
        self.filename = Path.home() / filename
        self.scores = self.load_scores()
    
    def load_scores(self) -> List[Dict]:
        try:
            if self.filename.exists():
                with open(self.filename, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return []
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—á–µ—Ç–æ–≤: {e}")
            return []
    
    def save_scores(self):
        try:
            with open(self.filename, 'w', encoding='utf-8') as f:
                json.dump(self.scores, f, indent=2, ensure_ascii=False)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—á–µ—Ç–æ–≤: {e}")
    
    def add_score(self, score: int, name: str = "Player", session: GameSession = None):
        entry = {
            'score': score,
            'name': name.strip() or "–ê–Ω–æ–Ω–∏–º",
            'timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),
            'field_size': session.field_size if session else "Medium",
            'difficulty': session.difficulty if session else "Medium",
            'duration': session.duration() if session else 0,
            'foods_eaten': session.foods_eaten if session else 0
        }
        
        self.scores.append(entry)
        self.scores.sort(key=lambda x: x['score'], reverse=True)
        self.scores = self.scores[:20]  # –£–≤–µ–ª–∏—á–µ–Ω —Ç–æ–ø –¥–æ 20
        self.save_scores()
    
    def get_high_score(self) -> int:
        return self.scores[0]['score'] if self.scores else 0
    
    def get_scores_by_field(self, field_size: str) -> List[Dict]:
        return [s for s in self.scores if s.get('field_size', 'Medium') == field_size]


class PremiumSnakeGame:
    def __init__(self, stdscr):
        self.stdscr = stdscr
        self.height, self.width = stdscr.getmaxyx()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∏—Å–ø–ª–µ—è
        curses.curs_set(0)
        curses.noecho()
        curses.cbreak()
        stdscr.keypad(True)
        stdscr.nodelay(True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤
        self.init_colors()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        self.state = GameState.MENU
        self.settings = self.load_settings()
        self.high_scores = HighScoreManager()
        self.menu_index = 0
        self.settings_index = 0
        
        # –ò–≥—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.calculate_field_dimensions()
        
        # –°–∏—Å—Ç–µ–º–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
        self.player_name = ""
        self.name_cursor = 0
        self.max_name_length = 15
        
        # –ò–≥—Ä–æ–≤–∞—è —Å–µ—Å—Å–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.current_session = None
        self.game_timer = 0
        self.last_speed_increase = 0
        self.foods_eaten = 0
        
        # –ë—É—Ñ–µ—Ä—ã –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
        self.frame_buffer = []
        self.last_frame_time = 0
        
        self.reset_game()
    
    def calculate_field_dimensions(self):
        """–†–∞—Å—á—ë—Ç —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        field = FIELD_SIZES[self.settings.field_size]
        
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –ø–æ–¥ —Ä–∞–∑–º–µ—Ä —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
        max_width = min(self.width - 6, field.width)
        max_height = min(self.height - 8, field.height)
        
        self.game_width = max(15, max_width)  # –ú–∏–Ω–∏–º—É–º 15
        self.game_height = max(10, max_height)  # –ú–∏–Ω–∏–º—É–º 10
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è
        self.start_x = (self.width - self.game_width) // 2
        self.start_y = (self.height - self.game_height) // 2 + 1
    
    def load_settings(self) -> GameSettings:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
        config_file = Path.home() / "snake_premium_config.json"
        try:
            if config_file.exists():
                with open(config_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                return GameSettings.from_dict(data)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        return GameSettings()
    
    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ñ–∞–π–ª"""
        config_file = Path.home() / "snake_premium_config.json"
        try:
            with open(config_file, 'w', encoding='utf-8') as f:
                json.dump(self.settings.to_dict(), f, indent=2, ensure_ascii=False)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    
    def init_colors(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã"""
        if curses.has_colors():
            curses.start_color()
            curses.use_default_colors()
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞
            curses.init_pair(1, curses.COLOR_GREEN, -1)    # –ó–º–µ–π–∫–∞
            curses.init_pair(2, curses.COLOR_RED, -1)      # –ï–¥–∞
            curses.init_pair(3, curses.COLOR_YELLOW, -1)   # –°—á—ë—Ç
            curses.init_pair(4, curses.COLOR_CYAN, -1)     # –†–∞–º–∫–∞
            curses.init_pair(5, curses.COLOR_WHITE, -1)    # –¢–µ–∫—Å—Ç –º–µ–Ω—é
            curses.init_pair(6, curses.COLOR_BLUE, -1)     # –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—É–Ω–∫—Ç
            curses.init_pair(7, curses.COLOR_MAGENTA, -1)  # –ê–∫—Ü–µ–Ω—Ç—ã
            curses.init_pair(8, curses.COLOR_BLACK, curses.COLOR_WHITE)  # –ò–Ω–≤–µ—Ä—Å–∏—è
            curses.init_pair(9, curses.COLOR_GREEN, curses.COLOR_BLACK)  # –¢—ë–º–Ω—ã–π —Ñ–æ–Ω
    
    def reset_game(self):
        """–°–±—Ä–æ—Å –∏–≥—Ä—ã –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é"""
        self.calculate_field_dimensions()
        
        start_y = self.game_height // 2
        start_x = self.game_width // 2
        self.snake = [
            Point(start_y, start_x),
            Point(start_y, start_x - 1),
            Point(start_y, start_x - 2)
        ]
        self.direction = Direction.RIGHT
        self.next_direction = Direction.RIGHT
        self.score = 0
        self.game_over = False
        self.paused = False
        self.foods_eaten = 0
        self.game_timer = 0
        self.last_speed_increase = 0
        
        self.place_food()
        self.current_speed = self.settings.initial_speed
        
        # –ù–æ–≤–∞—è –∏–≥—Ä–æ–≤–∞—è —Å–µ—Å—Å–∏—è
        self.current_session = GameSession(
            start_time=time.time(),
            field_size=self.settings.field_size,
            difficulty=self.settings.difficulty
        )
    
    def place_food(self):
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ –µ–¥—ã –≤ —Å–ª—É—á–∞–π–Ω–æ–º –º–µ—Å—Ç–µ"""
        attempts = 0
        while attempts < 100:
            food_y = random.randint(1, self.game_height - 2)
            food_x = random.randint(1, self.game_width - 2)
            self.food = Point(food_y, food_x)
            
            if self.food not in self.snake:
                break
            attempts += 1
    
    def draw_fancy_border(self, y, x, height, width, title=""):
        """–†–∏—Å–æ–≤–∞–Ω–∏–µ –∫—Ä–∞—Å–∏–≤–æ–π —Ä–∞–º–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º"""
        chars = {
            'tl': '‚ïî', 'tr': '‚ïó', 'bl': '‚ïö', 'br': '‚ïù',
            'h': '‚ïê', 'v': '‚ïë'
        }
        
        try:
            # –í–µ—Ä—Ö–Ω—è—è –ª–∏–Ω–∏—è
            self.stdscr.addch(y, x, chars['tl'], curses.color_pair(4))
            for i in range(1, width - 1):
                self.stdscr.addch(y, x + i, chars['h'], curses.color_pair(4))
            self.stdscr.addch(y, x + width - 1, chars['tr'], curses.color_pair(4))
            
            # –ë–æ–∫–æ–≤—ã–µ –ª–∏–Ω–∏–∏
            for i in range(1, height - 1):
                self.stdscr.addch(y + i, x, chars['v'], curses.color_pair(4))
                self.stdscr.addch(y + i, x + width - 1, chars['v'], curses.color_pair(4))
            
            # –ù–∏–∂–Ω—è—è –ª–∏–Ω–∏—è
            self.stdscr.addch(y + height - 1, x, chars['bl'], curses.color_pair(4))
            for i in range(1, width - 1):
                self.stdscr.addch(y + height - 1, x + i, chars['h'], curses.color_pair(4))
            self.stdscr.addch(y + height - 1, x + width - 1, chars['br'], curses.color_pair(4))
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            if title:
                title_x = x + (width - len(title)) // 2
                self.stdscr.addstr(y, title_x - 1, f' {title} ', curses.color_pair(7) | curses.A_BOLD)
        except curses.error:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —ç–∫—Ä–∞–Ω–∞
    
    def draw_grid(self):
        """–†–∏—Å–æ–≤–∞–Ω–∏–µ —Ñ–æ–Ω–æ–≤–æ–π —Å–µ—Ç–∫–∏"""
        if not self.settings.show_grid:
            return
        
        try:
            for y in range(self.start_y + 1, self.start_y + self.game_height - 1):
                for x in range(self.start_x + 1, self.start_x + self.game_width - 1):
                    if (y + x) % 2 == 0:
                        self.stdscr.addch(y, x, '¬∑', curses.color_pair(4) | curses.A_DIM)
        except curses.error:
            pass
    
    def draw_snake_modern(self):
        """–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–º–µ–π–∫–∏"""
        snake_chars = ['‚óè', '‚óã', '‚óê', '‚óë', '‚óí', '‚óì']
        
        for i, segment in enumerate(self.snake):
            try:
                y = self.start_y + segment.y
                x = self.start_x + segment.x
                
                if i == 0:  # –ì–æ–ª–æ–≤–∞
                    char = '‚óâ'
                    color = curses.color_pair(1) | curses.A_BOLD
                else:  # –¢–µ–ª–æ
                    char_index = min(i - 1, len(snake_chars) - 1)
                    char = snake_chars[char_index % len(snake_chars)]
                    color = curses.color_pair(1) | (curses.A_DIM if i > 3 else curses.A_NORMAL)
                
                self.stdscr.addch(y, x, char, color)
            except curses.error:
                pass
    
    def draw_food_modern(self):
        """–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ–¥—ã"""
        try:
            y = self.start_y + self.food.y
            x = self.start_x + self.food.x
            
            # –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –µ–¥–∞
            food_chars = ['‚óÜ', '‚óá', '‚óà', '‚óâ']
            char_index = (int(time.time() * 4) % len(food_chars))
            char = food_chars[char_index]
            
            self.stdscr.addch(y, x, char, curses.color_pair(2) | curses.A_BOLD)
        except curses.error:
            pass
    
    def draw_game_ui(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        try:
            # –°—á—ë—Ç
            score_text = f" –°–ß–Å–¢: {self.score} "
            self.stdscr.addstr(0, 0, score_text, curses.color_pair(3) | curses.A_BOLD)
            
            # –õ—É—á—à–∏–π —Å—á—ë—Ç
            high_score = self.high_scores.get_high_score()
            high_text = f" –†–ï–ö–û–†–î: {high_score} "
            self.stdscr.addstr(0, max(0, self.width - len(high_text)), high_text, curses.color_pair(7))
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã
            foods_text = f" –ï–î–ê: {self.foods_eaten} "
            self.stdscr.addstr(1, 0, foods_text, curses.color_pair(5))
            
            # –¢–∞–π–º–µ—Ä –∏ —Å–∫–æ—Ä–æ—Å—Ç—å
            if self.settings.timer_mode and self.current_session:
                elapsed = int(self.current_session.duration())
                timer_text = f" –í–†–ï–ú–Ø: {elapsed//60:02d}:{elapsed%60:02d} "
                speed_text = f" –°–ö–û–†–û–°–¢–¨: {200 - self.current_speed} "
                
                mid_point = self.width // 2
                self.stdscr.addstr(1, mid_point - len(timer_text)//2, timer_text, curses.color_pair(6))
                self.stdscr.addstr(1, max(0, self.width - len(speed_text)), speed_text, curses.color_pair(5))
            
            # –†–∞–∑–º–µ—Ä –ø–æ–ª—è
            field_info = f" –ü–û–õ–ï: {self.settings.field_size} ({self.game_width}x{self.game_height}) "
            if len(field_info) < self.width - 20:
                self.stdscr.addstr(self.height - 1, 0, field_info, curses.color_pair(4))
            
            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            controls = " [WASD/–°—Ç—Ä–µ–ª–∫–∏] | [P] –ü–∞—É–∑–∞ | [Q] –ú–µ–Ω—é "
            if len(controls) < self.width:
                self.stdscr.addstr(self.height - 1, max(0, self.width - len(controls)), controls, curses.color_pair(5))
            
            # –°—Ç–∞—Ç—É—Å –ø–∞—É–∑—ã
            if self.paused:
                pause_text = "*** –ü–ê–£–ó–ê ***"
                pause_x = (self.width - len(pause_text)) // 2
                self.stdscr.addstr(self.height // 2, pause_x, pause_text, 
                                 curses.color_pair(8) | curses.A_BLINK | curses.A_BOLD)
        except curses.error:
            pass
    
    def draw_menu(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        self.stdscr.clear()
        
        try:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏–≥—Ä—ã
            title = "üêç –ü–†–ï–ú–ò–£–ú –ó–ú–ï–ô–ö–ê v3.0 üêç"
            subtitle = "–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –∏–∑–¥–∞–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏"
            
            title_y = self.height // 4
            title_x = max(0, (self.width - len(title)) // 2)
            subtitle_x = max(0, (self.width - len(subtitle)) // 2)
            
            self.stdscr.addstr(title_y, title_x, title, curses.color_pair(7) | curses.A_BOLD)
            self.stdscr.addstr(title_y + 1, subtitle_x, subtitle, curses.color_pair(5))
            
            # –ü—É–Ω–∫—Ç—ã –º–µ–Ω—é
            menu_items = [
                "üéÆ –ù–ê–ß–ê–¢–¨ –ò–ì–†–£",
                "‚öôÔ∏è  –ù–ê–°–¢–†–û–ô–ö–ò", 
                "üèÜ –õ–£–ß–®–ò–ï –°–ß–ï–¢–ê",
                "‚ùå –í–´–•–û–î"
            ]
            
            menu_y = self.height // 2
            for i, item in enumerate(menu_items):
                item_x = max(0, (self.width - len(item)) // 2)
                color = curses.color_pair(6) | curses.A_BOLD if i == self.menu_index else curses.color_pair(5)
                prefix = "‚ñ∂ " if i == self.menu_index else "  "
                self.stdscr.addstr(menu_y + i * 2, max(0, item_x - 2), prefix + item, color)
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–Ω–∏–∑—É
            info_lines = [
                f"–õ—É—á—à–∏–π —Å—á—ë—Ç: {self.high_scores.get_high_score()}",
                f"–†–∞–∑–º–µ—Ä –ø–æ–ª—è: {self.settings.field_size}",
                f"–°–ª–æ–∂–Ω–æ—Å—Ç—å: {self.settings.difficulty}"
            ]
            
            for i, info in enumerate(info_lines):
                info_x = max(0, (self.width - len(info)) // 2)
                self.stdscr.addstr(self.height - 5 + i, info_x, info, curses.color_pair(3))
        except curses.error:
            pass
    
    def draw_settings(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        self.stdscr.clear()
        
        try:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            title = "‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –ò–ì–†–´"
            title_x = max(0, (self.width - len(title)) // 2)
            self.stdscr.addstr(2, title_x, title, curses.color_pair(7) | curses.A_BOLD)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
            settings_items = [
                f"–°–ª–æ–∂–Ω–æ—Å—Ç—å: {self.settings.difficulty}",
                f"–†–∞–∑–º–µ—Ä –ø–æ–ª—è: {self.settings.field_size}",
                f"–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ—Ç–∫—É: {'–î–∞' if self.settings.show_grid else '–ù–µ—Ç'}",
                f"–ü–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è: {'–î–∞' if self.settings.smooth_animation else '–ù–µ—Ç'}",
                f"–†–µ–∂–∏–º —Ç–∞–π–º–µ—Ä–∞: {'–î–∞' if self.settings.timer_mode else '–ù–µ—Ç'}",
                f"–ê–≤—Ç–æ-—É—Å–∫–æ—Ä–µ–Ω–∏–µ: {'–î–∞' if self.settings.auto_speed_increase else '–ù–µ—Ç'}",
                f"–¢–µ–º–∞: {self.settings.theme}",
                "",
                "–°–û–•–†–ê–ù–ò–¢–¨ –ò –í–´–ô–¢–ò"
            ]
            
            start_y = self.height // 4
            for i, item in enumerate(settings_items):
                if not item:
                    continue
                item_x = max(0, (self.width - len(item)) // 2)
                color = curses.color_pair(6) | curses.A_BOLD if i == self.settings_index else curses.color_pair(5)
                prefix = "‚ñ∂ " if i == self.settings_index else "  "
                self.stdscr.addstr(start_y + i * 2, max(0, item_x - 2), prefix + item, color)
            
            # –û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–±–æ—Ä–∞
            descriptions = {
                0: "–í–ª–∏—è–µ—Ç –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –∏–≥—Ä—ã",
                1: f"–¢–µ–∫—É—â–∏–π: {FIELD_SIZES[self.settings.field_size].description}",
                2: "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ—á–∫–∏ –¥–ª—è –ª—É—á—à–µ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏",
                3: "–ü–ª–∞–≤–Ω–æ—Å—Ç—å 60 FPS (–º–æ–∂–µ—Ç –∑–∞–º–µ–¥–ª–∏—Ç—å –∏–≥—Ä—É)",
                4: "–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã",
                5: "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø—Ä–∏ –ø–æ–µ–¥–∞–Ω–∏–∏ –µ–¥—ã",
                6: "–í–∏–∑—É–∞–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∏–≥—Ä—ã"
            }
            
            if self.settings_index in descriptions:
                desc = descriptions[self.settings_index]
                desc_x = max(0, (self.width - len(desc)) // 2)
                self.stdscr.addstr(self.height - 4, desc_x, desc, curses.color_pair(4))
            
            # –ü–æ–¥—Å–∫–∞–∑–∫–∏
            help_text = "–°—Ç—Ä–µ–ª–∫–∏: –≤—ã–±–æ—Ä | Enter: –∏–∑–º–µ–Ω–∏—Ç—å | Escape: –≤—ã—Ö–æ–¥ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"
            help_x = max(0, (self.width - len(help_text)) // 2)
            self.stdscr.addstr(self.height - 2, help_x, help_text, curses.color_pair(5))
        except curses.error:
            pass
    
    def draw_high_scores(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª—É—á—à–∏—Ö —Å—á–µ—Ç–æ–≤"""
        self.stdscr.clear()
        
        try:
            title = "üèÜ –¢–ê–ë–õ–ò–¶–ê –õ–ò–î–ï–†–û–í"
            title_x = max(0, (self.width - len(title)) // 2)
            self.stdscr.addstr(2, title_x, title, curses.color_pair(7) | curses.A_BOLD)
            
            scores = self.high_scores.scores
            start_y = 5
            
            if not scores:
                no_scores = "–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∫–æ—Ä–¥–æ–≤. –°—ã–≥—Ä–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∏–≥—Ä—É!"
                no_scores_x = max(0, (self.width - len(no_scores)) // 2)
                self.stdscr.addstr(self.height // 2, no_scores_x, no_scores, curses.color_pair(5))
            else:
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
                header = f"{'‚Ññ':2} {'–ò–ú–Ø':15} {'–°–ß–Å–¢':6} {'–ü–û–õ–ï':8} {'–í–†–ï–ú–Ø':8} {'–î–ê–¢–ê':10}"
                header_x = max(0, (self.width - len(header)) // 2)
                self.stdscr.addstr(start_y - 1, header_x, header, curses.color_pair(4) | curses.A_BOLD)
                
                # –°—á–µ—Ç–∞
                for i, score in enumerate(scores[:min(15, len(scores))]):
                    rank = f"{i+1:2d}"
                    name = score['name'][:15]
                    points = str(score['score'])
                    field = score.get('field_size', 'Medium')[:8]
                    duration = int(score.get('duration', 0))
                    duration_str = f"{duration//60:02d}:{duration%60:02d}"
                    date = score['timestamp'][:10]
                    
                    line = f"{rank} {name:15} {points:6} {field:8} {duration_str:8} {date}"
                    line_x = max(0, (self.width - len(line)) // 2)
                    
                    color = curses.color_pair(3) | curses.A_BOLD if i == 0 else curses.color_pair(5)
                    if i < 3:  # –¢–æ–ø 3
                        color |= curses.A_BOLD
                    
                    self.stdscr.addstr(start_y + i, line_x, line, color)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            if scores:
                total_games = len(scores)
                avg_score = sum(s['score'] for s in scores) // total_games
                stats = f"–í—Å–µ–≥–æ –∏–≥—Ä: {total_games} | –°—Ä–µ–¥–Ω–∏–π —Å—á—ë—Ç: {avg_score}"
                stats_x = max(0, (self.width - len(stats)) // 2)
                self.stdscr.addstr(self.height - 4, stats_x, stats, curses.color_pair(6))
            
            # –ù–∞–∑–∞–¥
            back_text = "–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é"
            back_x = max(0, (self.width - len(back_text)) // 2)
            self.stdscr.addstr(self.height - 2, back_x, back_text, curses.color_pair(5))
        except curses.error:
            pass
    
    def draw_name_input(self):
        """–≠–∫—Ä–∞–Ω –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞"""
        try:
            # –§–æ–Ω
            for y in range(self.height // 3, self.height // 3 + 10):
                for x in range(self.width // 4, 3 * self.width // 4):
                    self.stdscr.addch(y, x, ' ', curses.color_pair(9))
            
            center_y = self.height // 2 - 2
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            if self.score > self.high_scores.get_high_score():
                title = "üéâ –ù–û–í–´–ô –†–ï–ö–û–†–î! üéâ"
                title_color = curses.color_pair(7) | curses.A_BOLD | curses.A_BLINK
            else:
                title = "–ò–ì–†–ê –û–ö–û–ù–ß–ï–ù–ê"
                title_color = curses.color_pair(2) | curses.A_BOLD
            
            title_x = max(0, (self.width - len(title)) // 2)
            self.stdscr.addstr(center_y - 2, title_x, title, title_color)
            
            # –°—á—ë—Ç
            score_text = f"–í–∞—à —Å—á—ë—Ç: {self.score}"
            score_x = max(0, (self.width - len(score_text)) // 2)
            self.stdscr.addstr(center_y, score_x, score_text, curses.color_pair(3) | curses.A_BOLD)
            
            # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
            name_prompt = "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
            prompt_x = max(0, (self.width - len(name_prompt)) // 2)
            self.stdscr.addstr(center_y + 2, prompt_x, name_prompt, curses.color_pair(5))
            
            # –ü–æ–ª–µ –≤–≤–æ–¥–∞
            input_field = f"[{self.player_name:<{self.max_name_length}}]"
            input_x = max(0, (self.width - len(input_field)) // 2)
            self.stdscr.addstr(center_y + 3, input_x, input_field, curses.color_pair(6) | curses.A_BOLD)
            
            # –ö—É—Ä—Å–æ—Ä
            cursor_x = input_x + 1 + len(self.player_name)
            if cursor_x < self.width:
                self.stdscr.addch(center_y + 3, cursor_x, '|', curses.color_pair(7) | curses.A_BLINK)
            
            # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            instructions = [
                "Enter - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å | Escape - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                "–ë—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã –¥–ª—è –≤–≤–æ–¥–∞ | Backspace - —É–¥–∞–ª–∏—Ç—å"
            ]
            
            for i, instruction in enumerate(instructions):
                instr_x = max(0, (self.width - len(instruction)) // 2)
                self.stdscr.addstr(center_y + 5 + i, instr_x, instruction, curses.color_pair(5))
                
        except curses.error:
            pass
    
    def draw_game_over(self):
        """–≠–∫—Ä–∞–Ω –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã (—É—Å—Ç–∞—Ä–µ–ª, –∑–∞–º–µ–Ω—ë–Ω –Ω–∞ draw_name_input)"""
        self.draw_name_input()
    
    def handle_menu_input(self, key):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤ –º–µ–Ω—é"""
        if key in [curses.KEY_UP, ord('w'), ord('W')]:
            self.menu_index = (self.menu_index - 1) % 4
        elif key in [curses.KEY_DOWN, ord('s'), ord('S')]:
            self.menu_index = (self.menu_index + 1) % 4
        elif key in [curses.KEY_ENTER, ord('\n'), ord('\r')]:
            if self.menu_index == 0:  # –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
                self.state = GameState.PLAYING
                self.reset_game()
            elif self.menu_index == 1:  # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
                self.state = GameState.SETTINGS
                self.settings_index = 0
            elif self.menu_index == 2:  # –õ—É—á—à–∏–µ —Å—á–µ—Ç–∞
                self.state = GameState.HIGH_SCORES
            elif self.menu_index == 3:  # –í—ã—Ö–æ–¥
                return True
        return False
    
    def handle_settings_input(self, key):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"""
        max_settings = 8  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ + –∫–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
        
        if key in [curses.KEY_UP, ord('w'), ord('W')]:
            self.settings_index = (self.settings_index - 1) % max_settings
        elif key in [curses.KEY_DOWN, ord('s'), ord('S')]:
            self.settings_index = (self.settings_index + 1) % max_settings
        elif key in [curses.KEY_ENTER, ord('\n'), ord('\r')]:
            if self.settings_index == 0:  # –°–ª–æ–∂–Ω–æ—Å—Ç—å
                difficulties = ["Easy", "Medium", "Hard", "Extreme"]
                current = difficulties.index(self.settings.difficulty)
                self.settings.difficulty = difficulties[(current + 1) % len(difficulties)]
                speeds = {"Easy": 150, "Medium": 120, "Hard": 80, "Extreme": 50}
                self.settings.initial_speed = speeds[self.settings.difficulty]
            elif self.settings_index == 1:  # –†–∞–∑–º–µ—Ä –ø–æ–ª—è
                sizes = list(FIELD_SIZES.keys())
                current = sizes.index(self.settings.field_size)
                self.settings.field_size = sizes[(current + 1) % len(sizes)]
            elif self.settings_index == 2:  # –ü–æ–∫–∞–∑–∞—Ç—å —Å–µ—Ç–∫—É
                self.settings.show_grid = not self.settings.show_grid
            elif self.settings_index == 3:  # –ü–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
                self.settings.smooth_animation = not self.settings.smooth_animation
            elif self.settings_index == 4:  # –†–µ–∂–∏–º —Ç–∞–π–º–µ—Ä–∞
                self.settings.timer_mode = not self.settings.timer_mode
            elif self.settings_index == 5:  # –ê–≤—Ç–æ-—É—Å–∫–æ—Ä–µ–Ω–∏–µ
                self.settings.auto_speed_increase = not self.settings.auto_speed_increase
            elif self.settings_index == 6:  # –¢–µ–º–∞
                themes = ["Classic", "Modern", "Retro", "Neon"]
                current = themes.index(self.settings.theme)
                self.settings.theme = themes[(current + 1) % len(themes)]
            elif self.settings_index == 8:  # –í—ã—Ö–æ–¥
                self.save_settings()
                self.state = GameState.MENU
        elif key == 27:  # Escape
            self.state = GameState.MENU  # –í—ã—Ö–æ–¥ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    
    def handle_name_input(self, key):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
        if key in [curses.KEY_ENTER, ord('\n'), ord('\r')]:
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            final_name = self.player_name.strip() or "–ê–Ω–æ–Ω–∏–º"
            if self.current_session:
                self.current_session.end_time = time.time()
                self.current_session.score = self.score
                self.current_session.foods_eaten = self.foods_eaten
                self.current_session.max_length = len(self.snake)
            
            self.high_scores.add_score(self.score, final_name, self.current_session)
            self.player_name = ""
            self.state = GameState.MENU
            
        elif key == 27:  # Escape - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–≤–æ–¥ –∏–º–µ–Ω–∏
            if self.current_session:
                self.current_session.end_time = time.time()
                self.current_session.score = self.score
                self.current_session.foods_eaten = self.foods_eaten
                self.current_session.max_length = len(self.snake)
            
            self.high_scores.add_score(self.score, "–ê–Ω–æ–Ω–∏–º", self.current_session)
            self.player_name = ""
            self.state = GameState.MENU
            
        elif key == curses.KEY_BACKSPACE or key == 127 or key == 8:
            # –£–¥–∞–ª–∏—Ç—å —Å–∏–º–≤–æ–ª
            if self.player_name:
                self.player_name = self.player_name[:-1]
                
        elif key >= 32 and key <= 126:  # –ü–µ—á–∞—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            char = chr(key)
            if len(self.player_name) < self.max_name_length and (char.isalnum() or char in " -_"):
                self.player_name += char
    
    def handle_game_input(self, key):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤ –∏–≥—Ä–µ"""
        if key == ord('q') or key == ord('Q'):
            if self.game_over:
                self.state = GameState.NAME_INPUT
            else:
                self.state = GameState.MENU
            return
        elif key == ord('p') or key == ord('P'):
            if not self.game_over:
                self.paused = not self.paused
            return
        elif key == ord('r') or key == ord('R'):
            if self.game_over:
                self.reset_game()
                return
        elif key == ord('m') or key == ord('M'):
            if self.game_over:
                self.state = GameState.MENU
                return
        
        if self.paused or self.game_over:
            return
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏–µ–º
        direction_map = {
            curses.KEY_UP: Direction.UP,
            ord('w'): Direction.UP, ord('W'): Direction.UP,
            curses.KEY_DOWN: Direction.DOWN,
            ord('s'): Direction.DOWN, ord('S'): Direction.DOWN,
            curses.KEY_LEFT: Direction.LEFT,
            ord('a'): Direction.LEFT, ord('A'): Direction.LEFT,
            curses.KEY_RIGHT: Direction.RIGHT,
            ord('d'): Direction.RIGHT, ord('D'): Direction.RIGHT,
        }
        
        if key in direction_map:
            new_direction = direction_map[key]
            opposite = {
                Direction.UP: Direction.DOWN,
                Direction.DOWN: Direction.UP,
                Direction.LEFT: Direction.RIGHT,
                Direction.RIGHT: Direction.LEFT
            }
            
            if new_direction != opposite[self.direction]:
                self.next_direction = new_direction
    
    def update_game(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã"""
        if self.game_over or self.paused:
            return
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
        current_time = time.time()
        if self.current_session:
            self.game_timer = current_time - self.current_session.start_time
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–æ —Ç–∞–π–º–µ—Ä—É
            if (self.settings.timer_mode and 
                self.settings.auto_speed_increase and
                self.game_timer - self.last_speed_increase >= 30):  # –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                
                self.current_speed = max(40, self.current_speed - 5)
                self.last_speed_increase = self.game_timer
        
        # –ü–ª–∞–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.direction = self.next_direction
        
        # –†–∞—Å—á—ë—Ç –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ –≥–æ–ª–æ–≤—ã
        new_head = self.snake[0] + self.direction
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π —Å–æ —Å—Ç–µ–Ω–∞–º–∏
        if (new_head.y < 1 or new_head.y >= self.game_height - 1 or
            new_head.x < 1 or new_head.x >= self.game_width - 1):
            self.game_over = True
            self.state = GameState.NAME_INPUT
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å —Å–æ–±–æ–π
        if new_head in self.snake:
            self.game_over = True
            self.state = GameState.NAME_INPUT
            return
        
        # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–º–µ–π–∫–∏
        self.snake.insert(0, new_head)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–µ–¥–∞–Ω–∏—è –µ–¥—ã
        if new_head == self.food:
            self.score += 10
            self.foods_eaten += 1
            self.place_food()
            
            # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø—Ä–∏ –ø–æ–µ–¥–∞–Ω–∏–∏ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
            if self.settings.auto_speed_increase:
                self.current_speed = max(30, self.current_speed - 2)
        else:
            self.snake.pop()
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª"""
        while True:
            current_time = time.time()
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–≤–æ–¥–∞
            key = self.stdscr.getch()
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if self.state == GameState.MENU:
                if self.handle_menu_input(key):
                    break
                self.draw_menu()
                
            elif self.state == GameState.SETTINGS:
                self.handle_settings_input(key)
                self.draw_settings()
                
            elif self.state == GameState.HIGH_SCORES:
                if key != -1:  # –õ—é–±–∞—è –∫–ª–∞–≤–∏—à–∞
                    self.state = GameState.MENU
                self.draw_high_scores()
                
            elif self.state == GameState.NAME_INPUT:
                self.handle_name_input(key)
                self.draw_name_input()
                
            elif self.state == GameState.PLAYING:
                self.handle_game_input(key)
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä—ã —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º FPS
                if current_time - self.last_frame_time >= self.current_speed / 1000.0:
                    self.update_game()
                    self.last_frame_time = current_time
                
                # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä—ã
                self.stdscr.clear()
                self.draw_fancy_border(self.start_y - 1, self.start_x - 1, 
                                     self.game_height + 2, self.game_width + 2, 
                                     f"SNAKE PREMIUM - {self.settings.field_size.upper()}")
                
                if self.settings.show_grid:
                    self.draw_grid()
                
                self.draw_snake_modern()
                self.draw_food_modern()
                self.draw_game_ui()
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞
            try:
                self.stdscr.refresh()
            except curses.error:
                pass
            
            # –ö–æ–Ω—Ç—Ä–æ–ª—å FPS –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
            if self.settings.smooth_animation:
                time.sleep(0.016)  # ~60 FPS
            else:
                time.sleep(0.01)  # 100 FPS –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞


def main(stdscr):
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
    height, width = stdscr.getmaxyx()
    if height < 20 or width < 60:
        stdscr.addstr(0, 0, "–¢–µ—Ä–º–∏–Ω–∞–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª!")
        stdscr.addstr(1, 0, "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 60x20")
        stdscr.addstr(2, 0, "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: 100x30")
        stdscr.addstr(3, 0, "–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É...")
        stdscr.getch()
        return
    
    game = PremiumSnakeGame(stdscr)
    game.run()


if __name__ == "__main__":
    try:
        curses.wrapper(main)
    except KeyboardInterrupt:
        print("\n–ò–≥—Ä–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–µ—Ä–º–∏–Ω–∞–ª –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç curses –∏ –∏–º–µ–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä.")
