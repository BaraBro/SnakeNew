#!/usr/bin/env python3
"""
üêç –î–µ–º–æ Android-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–º–µ–π–∫–∏ –Ω–∞ Kivy
–ü—Ä–æ—Å—Ç–µ–π—à–∏–π –ø—Ä–∏–º–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–Ω–æ—Å–∞
"""

from kivy.app import App
from kivy.uix.widget import Widget
from kivy.uix.label import Label
from kivy.uix.button import Button
from kivy.uix.boxlayout import BoxLayout
from kivy.graphics import Rectangle, Color, Ellipse
from kivy.clock import Clock
from kivy.utils import get_color_from_hex
import random


class SnakeGameWidget(Widget):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        
        # –ò–≥—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.snake = [(5, 5), (4, 5), (3, 5)]  # –°–ø–∏—Å–æ–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∑–º–µ–π–∫–∏
        self.food = (10, 10)
        self.direction = 'right'
        self.cell_size = 20
        self.field_width = 20
        self.field_height = 15
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ –∫ —Ä–∞–∑–º–µ—Ä—É –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
        self.bind(size=self.update_graphics, pos=self.update_graphics)
        
        # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä—ã
        Clock.schedule_interval(self.update_game, 0.5)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 0.5 —Å–µ–∫—É–Ω–¥
    
    def update_graphics(self, *args):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤"""
        if not self.canvas:
            return
            
        # –†–∞—Å—á—ë—Ç —Ä–∞–∑–º–µ—Ä–æ–≤ —è—á–µ–µ–∫ –ø–æ–¥ —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
        self.cell_size = min(self.width // self.field_width, self.height // self.field_height)
        
        # –û—Ç—Å—Ç—É–ø—ã –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        self.offset_x = (self.width - self.field_width * self.cell_size) // 2
        self.offset_y = (self.height - self.field_height * self.cell_size) // 2
        
        self.draw_game()
    
    def draw_game(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è"""
        with self.canvas:
            self.canvas.clear()
            
            # –§–æ–Ω –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
            Color(0.1, 0.1, 0.1)  # –¢—ë–º–Ω–æ-—Å–µ—Ä—ã–π
            Rectangle(pos=(self.offset_x, self.offset_y), 
                     size=(self.field_width * self.cell_size, 
                           self.field_height * self.cell_size))
            
            # –°–µ—Ç–∫–∞
            Color(0.2, 0.2, 0.2)  # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π
            for i in range(self.field_width + 1):
                x = self.offset_x + i * self.cell_size
                Rectangle(pos=(x, self.offset_y), size=(1, self.field_height * self.cell_size))
            for j in range(self.field_height + 1):
                y = self.offset_y + j * self.cell_size
                Rectangle(pos=(self.offset_x, y), size=(self.field_width * self.cell_size, 1))
            
            # –ó–º–µ–π–∫–∞
            Color(0, 1, 0)  # –ó–µ–ª—ë–Ω—ã–π
            for i, (x, y) in enumerate(self.snake):
                pixel_x = self.offset_x + x * self.cell_size
                pixel_y = self.offset_y + y * self.cell_size
                
                if i == 0:  # –ì–æ–ª–æ–≤–∞
                    Color(0, 0.8, 0)  # –¢—ë–º–Ω–æ-–∑–µ–ª—ë–Ω—ã–π
                else:  # –¢–µ–ª–æ
                    Color(0, 1, 0)  # –ó–µ–ª—ë–Ω—ã–π
                
                Rectangle(pos=(pixel_x + 1, pixel_y + 1), 
                         size=(self.cell_size - 2, self.cell_size - 2))
            
            # –ï–¥–∞
            Color(1, 0, 0)  # –ö—Ä–∞—Å–Ω—ã–π
            food_x = self.offset_x + self.food[0] * self.cell_size
            food_y = self.offset_y + self.food[1] * self.cell_size
            Ellipse(pos=(food_x + 2, food_y + 2), 
                   size=(self.cell_size - 4, self.cell_size - 4))
    
    def update_game(self, dt):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –∏–≥—Ä—ã"""
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ –≥–æ–ª–æ–≤—ã
        head_x, head_y = self.snake[0]
        
        if self.direction == 'up':
            head_y += 1
        elif self.direction == 'down':
            head_y -= 1
        elif self.direction == 'left':
            head_x -= 1
        elif self.direction == 'right':
            head_x += 1
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—Ü (—Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º —á–µ—Ä–µ–∑ —Å—Ç–µ–Ω—ã –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
        head_x = head_x % self.field_width
        head_y = head_y % self.field_height
        
        new_head = (head_x, head_y)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å —Å–æ–±–æ–π
        if new_head in self.snake:
            self.reset_game()
            return
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –≥–æ–ª–æ–≤—ã
        self.snake.insert(0, new_head)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–µ–¥–∞–Ω–∏—è –µ–¥—ã
        if new_head == self.food:
            self.spawn_food()
        else:
            self.snake.pop()  # –£–¥–∞–ª–µ–Ω–∏–µ —Ö–≤–æ—Å—Ç–∞
        
        self.draw_game()
    
    def spawn_food(self):
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–æ–≤–æ–π –µ–¥—ã"""
        while True:
            x = random.randint(0, self.field_width - 1)
            y = random.randint(0, self.field_height - 1)
            if (x, y) not in self.snake:
                self.food = (x, y)
                break
    
    def reset_game(self):
        """–°–±—Ä–æ—Å –∏–≥—Ä—ã"""
        self.snake = [(5, 5), (4, 5), (3, 5)]
        self.direction = 'right'
        self.spawn_food()
    
    def change_direction(self, new_direction):
        """–°–º–µ–Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞"""
        opposites = {'up': 'down', 'down': 'up', 'left': 'right', 'right': 'left'}
        if opposites.get(new_direction) != self.direction:
            self.direction = new_direction
    
    def on_touch_down(self, touch):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å–∞–Ω–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        if not self.collide_point(*touch.pos):
            return False
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–∏ –∫–∞—Å–∞–Ω–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∞
        center_x = self.center_x
        center_y = self.center_y
        
        dx = touch.pos[0] - center_x
        dy = touch.pos[1] - center_y
        
        if abs(dx) > abs(dy):
            if dx > 0:
                self.change_direction('right')
            else:
                self.change_direction('left')
        else:
            if dy > 0:
                self.change_direction('up')
            else:
                self.change_direction('down')
        
        return True


class SnakeApp(App):
    def build(self):
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ layout'a
        main_layout = BoxLayout(orientation='vertical')
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = Label(text='üêç Snake Demo for Android', 
                     size_hint=(1, 0.1),
                     font_size='20sp',
                     color=get_color_from_hex('#00FF00'))
        
        # –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
        game_widget = SnakeGameWidget()
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_panel = BoxLayout(size_hint=(1, 0.15))
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_up = Button(text='‚Üë', size_hint=(0.25, 1))
        btn_down = Button(text='‚Üì', size_hint=(0.25, 1))
        btn_left = Button(text='‚Üê', size_hint=(0.25, 1))
        btn_right = Button(text='‚Üí', size_hint=(0.25, 1))
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –∫–Ω–æ–ø–æ–∫
        btn_up.bind(on_press=lambda x: game_widget.change_direction('up'))
        btn_down.bind(on_press=lambda x: game_widget.change_direction('down'))
        btn_left.bind(on_press=lambda x: game_widget.change_direction('left'))
        btn_right.bind(on_press=lambda x: game_widget.change_direction('right'))
        
        control_panel.add_widget(btn_left)
        control_panel.add_widget(btn_down)
        control_panel.add_widget(btn_up)
        control_panel.add_widget(btn_right)
        
        # –°–±–æ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        main_layout.add_widget(title)
        main_layout.add_widget(game_widget)
        main_layout.add_widget(control_panel)
        
        return main_layout


if __name__ == '__main__':
    SnakeApp().run()
