#!/usr/bin/env python3
"""
üêç –ò–ì–†–û–í–û–ô –î–í–ò–ñ–û–ö –ó–ú–ï–ô–ö–ò v3.0
–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–≥—Ä—ã –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
–ú–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞, Android, –≤–µ–± –∏ –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º.
"""

import random
import time
import json
from enum import Enum
from dataclasses import dataclass, asdict
from typing import List, Tuple, Optional, Dict, Any, Callable
from abc import ABC, abstractmethod


class Direction(Enum):
    UP = (-1, 0)
    DOWN = (1, 0)  
    LEFT = (0, -1)
    RIGHT = (0, 1)


class GameState(Enum):
    MENU = "menu"
    PLAYING = "playing"
    PAUSED = "paused"
    GAME_OVER = "game_over"
    SETTINGS = "settings"
    HIGH_SCORES = "high_scores"
    NAME_INPUT = "name_input"


@dataclass
class Point:
    y: int
    x: int
    
    def __add__(self, direction: Direction):
        dy, dx = direction.value
        return Point(self.y + dy, self.x + dx)
    
    def __eq__(self, other):
        return isinstance(other, Point) and self.y == other.y and self.x == other.x
    
    def __hash__(self):
        return hash((self.y, self.x))


@dataclass
class FieldSize:
    name: str
    width: int
    height: int
    description: str


# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –ø–æ–ª–µ–π
FIELD_SIZES = {
    "Small": FieldSize("Small", 15, 10, "–ú–∞–ª–µ–Ω—å–∫–æ–µ –ø–æ–ª–µ - –±—ã—Å—Ç—Ä—ã–µ –∏–≥—Ä—ã"),
    "Medium": FieldSize("Medium", 20, 15, "–°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä - –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ"), 
    "Large": FieldSize("Large", 30, 20, "–ë–æ–ª—å—à–æ–µ –ø–æ–ª–µ - –¥–æ–ª–≥–∏–µ –∏–≥—Ä—ã"),
    "Classic": FieldSize("Classic", 25, 18, "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä Nokia")
}


@dataclass
class GameSettings:
    initial_speed: int = 150
    difficulty: str = "Medium"
    show_grid: bool = True
    smooth_animation: bool = True
    sound_effects: bool = False
    theme: str = "Classic"
    field_size: str = "Medium"
    timer_mode: bool = True
    auto_speed_increase: bool = True
    vibration: bool = True  # –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    
    def to_dict(self) -> Dict[str, Any]:
        return asdict(self)
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]):
        known_fields = {field.name for field in cls.__dataclass_fields__.values()}
        filtered_data = {k: v for k, v in data.items() if k in known_fields}
        return cls(**filtered_data)


@dataclass
class GameSession:
    """–î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    start_time: float
    end_time: float = 0
    score: int = 0
    foods_eaten: int = 0
    max_length: int = 3
    field_size: str = "Medium"
    difficulty: str = "Medium"
    moves_made: int = 0
    pauses_count: int = 0
    
    def duration(self) -> float:
        return (self.end_time or time.time()) - self.start_time
    
    def to_dict(self) -> Dict[str, Any]:
        return asdict(self)


class GameRenderer(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞ (—Ç–µ—Ä–º–∏–Ω–∞–ª, Android UI, –≤–µ–± –∏ —Ç.–¥.)"""
    
    @abstractmethod
    def draw_menu(self, menu_items: List[str], selected_index: int):
        pass
    
    @abstractmethod 
    def draw_game_field(self, snake: List[Point], food: Point, field_width: int, field_height: int):
        pass
    
    @abstractmethod
    def draw_ui(self, score: int, high_score: int, timer: str, speed: int):
        pass
    
    @abstractmethod
    def draw_settings(self, settings_items: List[str], selected_index: int):
        pass
    
    @abstractmethod
    def draw_high_scores(self, scores: List[Dict]):
        pass
    
    @abstractmethod
    def draw_name_input(self, name: str, cursor_pos: int, is_new_record: bool, score: int):
        pass
    
    @abstractmethod
    def show_message(self, message: str, message_type: str = "info"):
        pass


class InputHandler(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞"""
    
    @abstractmethod
    def get_input(self) -> Optional[str]:
        pass
    
    @abstractmethod
    def get_direction_input(self) -> Optional[Direction]:
        pass


class DataManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º/–∑–∞–≥—Ä—É–∑–∫–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, data_dir: str = "."):
        self.data_dir = data_dir
        self.settings_file = f"{data_dir}/snake_settings.json"
        self.scores_file = f"{data_dir}/snake_scores.json"
    
    def load_settings(self) -> GameSettings:
        try:
            with open(self.settings_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            return GameSettings.from_dict(data)
        except (FileNotFoundError, json.JSONDecodeError, Exception):
            return GameSettings()
    
    def save_settings(self, settings: GameSettings):
        try:
            with open(self.settings_file, 'w', encoding='utf-8') as f:
                json.dump(settings.to_dict(), f, indent=2, ensure_ascii=False)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    
    def load_scores(self) -> List[Dict]:
        try:
            with open(self.scores_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError, Exception):
            return []
    
    def save_scores(self, scores: List[Dict]):
        try:
            with open(self.scores_file, 'w', encoding='utf-8') as f:
                json.dump(scores, f, indent=2, ensure_ascii=False)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—á–µ—Ç–æ–≤: {e}")
    
    def add_score(self, score: int, name: str, session: GameSession) -> List[Dict]:
        scores = self.load_scores()
        
        entry = {
            'score': score,
            'name': name.strip() or "–ê–Ω–æ–Ω–∏–º",
            'timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),
            'field_size': session.field_size,
            'difficulty': session.difficulty,
            'duration': session.duration(),
            'foods_eaten': session.foods_eaten,
            'moves_made': session.moves_made,
            'efficiency': score / max(session.moves_made, 1)  # –û—á–∫–∏ –∑–∞ —Ö–æ–¥
        }
        
        scores.append(entry)
        scores.sort(key=lambda x: x['score'], reverse=True)
        scores = scores[:50]  # –¢–æ–ø 50
        
        self.save_scores(scores)
        return scores


class SnakeGameEngine:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π –¥–≤–∏–∂–æ–∫ –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ"""
    
    def __init__(self, renderer: GameRenderer, input_handler: InputHandler, data_manager: DataManager):
        self.renderer = renderer
        self.input_handler = input_handler
        self.data_manager = data_manager
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        self.state = GameState.MENU
        self.settings = data_manager.load_settings()
        self.menu_index = 0
        self.settings_index = 0
        
        # –ò–≥—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.field_width = 20
        self.field_height = 15
        self.calculate_field_dimensions()
        
        # –ò–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.snake: List[Point] = []
        self.food: Point = Point(0, 0)
        self.direction = Direction.RIGHT
        self.next_direction = Direction.RIGHT
        self.score = 0
        self.game_over = False
        self.paused = False
        
        # –°–∏—Å—Ç–µ–º–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
        self.player_name = ""
        self.max_name_length = 20
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –≤—Ä–µ–º—è
        self.current_session: Optional[GameSession] = None
        self.current_speed = 150
        self.last_update_time = 0
        self.last_speed_increase = 0
        self.foods_eaten = 0
        
        # Callbacks –¥–ª—è —Å–æ–±—ã—Ç–∏–π
        self.on_food_eaten: Optional[Callable] = None
        self.on_game_over: Optional[Callable] = None
        self.on_score_changed: Optional[Callable] = None
        
    def calculate_field_dimensions(self):
        """–†–∞—Å—á—ë—Ç —Ä–∞–∑–º–µ—Ä–æ–≤ –ø–æ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        field_info = FIELD_SIZES[self.settings.field_size]
        self.field_width = field_info.width
        self.field_height = field_info.height
    
    def reset_game(self):
        """–°–±—Ä–æ—Å –∏–≥—Ä—ã –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é"""
        self.calculate_field_dimensions()
        
        # –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –∑–º–µ–π–∫–∏ –≤ —Ü–µ–Ω—Ç—Ä–µ –ø–æ–ª—è
        center_y = self.field_height // 2
        center_x = self.field_width // 2
        
        self.snake = [
            Point(center_y, center_x),
            Point(center_y, center_x - 1), 
            Point(center_y, center_x - 2)
        ]
        
        self.direction = Direction.RIGHT
        self.next_direction = Direction.RIGHT
        self.score = 0
        self.game_over = False
        self.paused = False
        self.foods_eaten = 0
        self.current_speed = self.settings.initial_speed
        self.last_speed_increase = 0
        
        self.place_food()
        
        # –ù–æ–≤–∞—è –∏–≥—Ä–æ–≤–∞—è —Å–µ—Å—Å–∏—è
        self.current_session = GameSession(
            start_time=time.time(),
            field_size=self.settings.field_size,
            difficulty=self.settings.difficulty
        )
    
    def place_food(self):
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ –µ–¥—ã –≤ —Å–ª—É—á–∞–π–Ω–æ–º –º–µ—Å—Ç–µ"""
        attempts = 0
        while attempts < 100:
            food_y = random.randint(0, self.field_height - 1)
            food_x = random.randint(0, self.field_width - 1)
            new_food = Point(food_y, food_x)
            
            if new_food not in self.snake:
                self.food = new_food
                break
            attempts += 1
    
    def get_high_score(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        scores = self.data_manager.load_scores()
        return scores[0]['score'] if scores else 0
    
    def handle_direction_input(self, new_direction: Direction) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è"""
        if self.paused or self.game_over:
            return False
            
        opposite = {
            Direction.UP: Direction.DOWN,
            Direction.DOWN: Direction.UP,
            Direction.LEFT: Direction.RIGHT,
            Direction.RIGHT: Direction.LEFT
        }
        
        if new_direction != opposite[self.direction]:
            self.next_direction = new_direction
            return True
        return False
    
    def handle_menu_navigation(self, action: str) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ–Ω—é"""
        if action == "up":
            self.menu_index = (self.menu_index - 1) % 4
        elif action == "down":
            self.menu_index = (self.menu_index + 1) % 4
        elif action == "select":
            if self.menu_index == 0:  # –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
                self.state = GameState.PLAYING
                self.reset_game()
            elif self.menu_index == 1:  # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
                self.state = GameState.SETTINGS
                self.settings_index = 0
            elif self.menu_index == 2:  # –†–µ–∫–æ—Ä–¥—ã
                self.state = GameState.HIGH_SCORES
            elif self.menu_index == 3:  # –í—ã—Ö–æ–¥
                return True
        return False
    
    def handle_settings_navigation(self, action: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"""
        max_settings = 9  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ + –≤—ã—Ö–æ–¥
        
        if action == "up":
            self.settings_index = (self.settings_index - 1) % max_settings
        elif action == "down":
            self.settings_index = (self.settings_index + 1) % max_settings
        elif action == "select":
            if self.settings_index == 0:  # –°–ª–æ–∂–Ω–æ—Å—Ç—å
                difficulties = ["Easy", "Medium", "Hard", "Extreme"]
                current = difficulties.index(self.settings.difficulty)
                self.settings.difficulty = difficulties[(current + 1) % len(difficulties)]
                speeds = {"Easy": 200, "Medium": 150, "Hard": 100, "Extreme": 60}
                self.settings.initial_speed = speeds[self.settings.difficulty]
            elif self.settings_index == 1:  # –†–∞–∑–º–µ—Ä –ø–æ–ª—è
                sizes = list(FIELD_SIZES.keys())
                current = sizes.index(self.settings.field_size)
                self.settings.field_size = sizes[(current + 1) % len(sizes)]
            elif self.settings_index == 2:  # –°–µ—Ç–∫–∞
                self.settings.show_grid = not self.settings.show_grid
            elif self.settings_index == 3:  # –ê–Ω–∏–º–∞—Ü–∏—è
                self.settings.smooth_animation = not self.settings.smooth_animation
            elif self.settings_index == 4:  # –¢–∞–π–º–µ—Ä
                self.settings.timer_mode = not self.settings.timer_mode
            elif self.settings_index == 5:  # –ê–≤—Ç–æ-—É—Å–∫–æ—Ä–µ–Ω–∏–µ
                self.settings.auto_speed_increase = not self.settings.auto_speed_increase
            elif self.settings_index == 6:  # –ó–≤—É–∫–∏
                self.settings.sound_effects = not self.settings.sound_effects
            elif self.settings_index == 7:  # –í–∏–±—Ä–∞—Ü–∏—è
                self.settings.vibration = not self.settings.vibration
            elif self.settings_index == 8:  # –í—ã—Ö–æ–¥
                self.data_manager.save_settings(self.settings)
                self.state = GameState.MENU
        elif action == "back":
            self.state = GameState.MENU
    
    def handle_name_input(self, action: str, char: str = ""):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
        if action == "char" and char:
            if len(self.player_name) < self.max_name_length and char.isprintable():
                self.player_name += char
        elif action == "backspace":
            if self.player_name:
                self.player_name = self.player_name[:-1]
        elif action == "enter":
            self.finish_game_session()
        elif action == "skip":
            self.player_name = "–ê–Ω–æ–Ω–∏–º"
            self.finish_game_session()
    
    def finish_game_session(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if self.current_session:
            self.current_session.end_time = time.time()
            self.current_session.score = self.score
            self.current_session.foods_eaten = self.foods_eaten
            self.current_session.max_length = len(self.snake)
            
            final_name = self.player_name.strip() or "–ê–Ω–æ–Ω–∏–º"
            self.data_manager.add_score(self.score, final_name, self.current_session)
        
        self.player_name = ""
        self.state = GameState.MENU
    
    def toggle_pause(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–∞—É–∑—ã"""
        if self.state == GameState.PLAYING and not self.game_over:
            self.paused = not self.paused
            if self.current_session:
                self.current_session.pauses_count += 1
    
    def update_game_logic(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–∏"""
        if self.game_over or self.paused:
            return
        
        current_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if current_time - self.last_update_time < self.current_speed / 1000.0:
            return
        
        self.last_update_time = current_time
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–∏
        if self.current_session:
            self.current_session.moves_made += 1
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            if (self.settings.timer_mode and 
                self.settings.auto_speed_increase and
                current_time - self.current_session.start_time - self.last_speed_increase >= 30):
                
                self.current_speed = max(50, self.current_speed - 10)
                self.last_speed_increase = current_time - self.current_session.start_time
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.direction = self.next_direction
        
        # –ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –≥–æ–ª–æ–≤—ã
        new_head = self.snake[0] + self.direction
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—Ü
        if (new_head.y < 0 or new_head.y >= self.field_height or
            new_head.x < 0 or new_head.x >= self.field_width):
            self.game_over = True
            self.state = GameState.NAME_INPUT
            if self.on_game_over:
                self.on_game_over()
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å —Å–æ–±–æ–π
        if new_head in self.snake:
            self.game_over = True
            self.state = GameState.NAME_INPUT
            if self.on_game_over:
                self.on_game_over()
            return
        
        # –î–≤–∏–∂–µ–Ω–∏–µ –∑–º–µ–π–∫–∏
        self.snake.insert(0, new_head)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–µ–¥–∞–Ω–∏—è –µ–¥—ã
        if new_head == self.food:
            self.score += 10
            self.foods_eaten += 1
            self.place_food()
            
            # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø—Ä–∏ –ø–æ–µ–¥–∞–Ω–∏–∏
            if self.settings.auto_speed_increase:
                self.current_speed = max(40, self.current_speed - 3)
            
            if self.on_food_eaten:
                self.on_food_eaten()
            if self.on_score_changed:
                self.on_score_changed(self.score)
        else:
            self.snake.pop()
    
    def get_game_state_data(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞"""
        timer_str = "00:00"
        if self.current_session:
            elapsed = int(self.current_session.duration())
            timer_str = f"{elapsed//60:02d}:{elapsed%60:02d}"
        
        return {
            'snake': self.snake,
            'food': self.food,
            'score': self.score,
            'high_score': self.get_high_score(),
            'field_width': self.field_width,
            'field_height': self.field_height,
            'timer': timer_str,
            'speed': 200 - self.current_speed,
            'foods_eaten': self.foods_eaten,
            'paused': self.paused,
            'game_over': self.game_over
        }
    
    def get_menu_items(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—É–Ω–∫—Ç—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        return [
            "üéÆ –ù–ê–ß–ê–¢–¨ –ò–ì–†–£",
            "‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò",
            "üèÜ –†–ï–ö–û–†–î–´",
            "‚ùå –í–´–•–û–î"
        ]
    
    def get_settings_items(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        return [
            f"–°–ª–æ–∂–Ω–æ—Å—Ç—å: {self.settings.difficulty}",
            f"–†–∞–∑–º–µ—Ä –ø–æ–ª—è: {self.settings.field_size}",
            f"–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ—Ç–∫—É: {'–î–∞' if self.settings.show_grid else '–ù–µ—Ç'}",
            f"–ü–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è: {'–î–∞' if self.settings.smooth_animation else '–ù–µ—Ç'}",
            f"–†–µ–∂–∏–º —Ç–∞–π–º–µ—Ä–∞: {'–î–∞' if self.settings.timer_mode else '–ù–µ—Ç'}",
            f"–ê–≤—Ç–æ-—É—Å–∫–æ—Ä–µ–Ω–∏–µ: {'–î–∞' if self.settings.auto_speed_increase else '–ù–µ—Ç'}",
            f"–ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã: {'–î–∞' if self.settings.sound_effects else '–ù–µ—Ç'}",
            f"–í–∏–±—Ä–∞—Ü–∏—è: {'–î–∞' if self.settings.vibration else '–ù–µ—Ç'}",
            "–°–û–•–†–ê–ù–ò–¢–¨ –ò –í–´–ô–¢–ò"
        ]
    
    def run_frame(self):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–∏–Ω –∫–∞–¥—Ä –∏–≥—Ä—ã"""
        if self.state == GameState.PLAYING:
            self.update_game_logic()
        
        # –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if self.state == GameState.MENU:
            self.renderer.draw_menu(self.get_menu_items(), self.menu_index)
        elif self.state == GameState.SETTINGS:
            self.renderer.draw_settings(self.get_settings_items(), self.settings_index)
        elif self.state == GameState.HIGH_SCORES:
            scores = self.data_manager.load_scores()
            self.renderer.draw_high_scores(scores)
        elif self.state == GameState.NAME_INPUT:
            is_new_record = self.score > self.get_high_score()
            self.renderer.draw_name_input(self.player_name, len(self.player_name), is_new_record, self.score)
        elif self.state == GameState.PLAYING:
            game_data = self.get_game_state_data()
            self.renderer.draw_game_field(game_data['snake'], game_data['food'], 
                                        game_data['field_width'], game_data['field_height'])
            self.renderer.draw_ui(game_data['score'], game_data['high_score'], 
                                game_data['timer'], game_data['speed'])


# –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
__all__ = [
    'SnakeGameEngine', 'GameRenderer', 'InputHandler', 'DataManager',
    'GameState', 'Direction', 'Point', 'GameSettings', 'GameSession',
    'FIELD_SIZES'
]
